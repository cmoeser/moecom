/* Generated by Babel */
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Artwork = (function () {
	function Artwork($, Utils) {
		_classCallCheck(this, Artwork);

		var $window = $(window);

		this.currentCat = 0;
		this.thumbImgs = [];
		this.fullImgs = [];
		this.currentImg = 0;

		var $win = $(window);
		var $doc = $(document);
		var self = this;
		var utils = new Utils();

		var categories = ['painting'];

		var selectors = {
			thumbnails: '.thumbnails',
			artworkImage: '.artworkImage'
		};

		var objects = {
			thumbnails: $(selectors.thumbnails),
			fullImage: $(selectors.artworkImage)
		};

		this.loadArtworkJSON = function () {
			return $.getJSON('resources/includes/painting.json').then(function (data) {
				return data;
			});
		};

		this.processJSON = function (data) {
			var json = data;

			for (var key in json) {
				if (json.hasOwnProperty(key)) {
					this.thumbImgs.push(json[key].thumbLoc);
					var artwork = new Object({
						'imgLoc': json[key].imgLoc,
						'imgTitle': json[key].imgTitle,
						'imgMedium': json[key].imgMedium,
						'imgDate': json[key].imgDate,
						'imgDimensions': json[key].imgDimensions,
						'imgAvail': json[key].imgAvail
					});
					this.fullImgs.push(artwork);
				}
			}
			this.setUrlVar('img');
			if (utils.getViewportSize() !== 'small') this.createThumbnails();
		};

		this.createThumbnails = function () {
			var html = this.generateThumbs('thumbnails');
			objects.thumbnails.append(html);
			this.setFullImg();
		};

		this.generateThumbs = function () {
			var thumbImgs = this.thumbImgs,
			    htmlObj = document.createElement('div');

			for (var i = 0; i < thumbImgs.length; i++) {
				var img = new Image(),
				    src = "resources/images/" + categories[this.currentCat] + "/" + thumbImgs[i],
				    alt = this.fullImgs[i].imgTitle;
				var $img = $(img).attr('alt', alt);
				$img.attr('src', src);
				$(htmlObj).append($img);
			}
			return htmlObj;
		};

		this.setFullImg = function () {
			var fullImg = this.fullImgs[this.currentImg],
			    img = new Image(),
			    src = "resources/images/" + categories[this.currentCat] + "/" + fullImg.imgLoc,
			    alt = fullImg.imgTitle;
			var $img = $(img).attr('alt', alt);
			$img.attr('src', src);

			objects.fullImage.append($img);
		};

		this.setUrlVar = function (urlVar) {
			var setvar = utils.getQueryVariable(urlVar);
			if (setvar == 'cat') {
				//Check for non numbers, undefined and irellivant numbers
				this.currentCat = setvar ? !isNaN(setvar) ? setvar < categories.length ? setvar : 0 : 0 : 0;
			} else {
				this.currentImg = setvar ? !isNaN(setvar) ? setvar < this.fullImgs.length ? setvar : 0 : 0 : 0;
			}
		};
	}

	_createClass(Artwork, [{
		key: 'name',
		value: function name() {
			return "Artwork";
		}
	}, {
		key: 'init',
		value: function init() {
			this.setUrlVar('cat');

			var $scope = this;
			this.loadArtworkJSON().done($scope, function (data) {
				$scope.processJSON(data);
			});
		}
	}]);

	return Artwork;
})();

exports['default'] = Artwork;
module.exports = exports['default'];